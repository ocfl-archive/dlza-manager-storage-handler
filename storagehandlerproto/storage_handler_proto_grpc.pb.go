// protoc --go_out=. --go-grpc_out=. proto/copy.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: storage_handler_proto.proto

package storagehandlerproto

import (
	context "context"
	dlzamanagerproto "github.com/ocfl-archive/dlza-manager/dlzamanagerproto"
	proto "go.ub.unibas.ch/cloud/genericproto/v2/pkg/generic/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UploaderHandlerService_TenantHasAccess_FullMethodName    = "/storagehandlerproto.UploaderHandlerService/TenantHasAccess"
	UploaderHandlerService_SaveObjectAndFiles_FullMethodName = "/storagehandlerproto.UploaderHandlerService/SaveObjectAndFiles"
	UploaderHandlerService_AlterStatus_FullMethodName        = "/storagehandlerproto.UploaderHandlerService/AlterStatus"
)

// UploaderHandlerServiceClient is the client API for UploaderHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploaderHandlerServiceClient interface {
	TenantHasAccess(ctx context.Context, in *dlzamanagerproto.UploaderAccessObject, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	SaveObjectAndFiles(ctx context.Context, in *dlzamanagerproto.ObjectAndFiles, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error)
	AlterStatus(ctx context.Context, in *dlzamanagerproto.StatusObject, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
}

type uploaderHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploaderHandlerServiceClient(cc grpc.ClientConnInterface) UploaderHandlerServiceClient {
	return &uploaderHandlerServiceClient{cc}
}

func (c *uploaderHandlerServiceClient) TenantHasAccess(ctx context.Context, in *dlzamanagerproto.UploaderAccessObject, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, UploaderHandlerService_TenantHasAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploaderHandlerServiceClient) SaveObjectAndFiles(ctx context.Context, in *dlzamanagerproto.ObjectAndFiles, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error) {
	out := new(dlzamanagerproto.Id)
	err := c.cc.Invoke(ctx, UploaderHandlerService_SaveObjectAndFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploaderHandlerServiceClient) AlterStatus(ctx context.Context, in *dlzamanagerproto.StatusObject, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, UploaderHandlerService_AlterStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploaderHandlerServiceServer is the server API for UploaderHandlerService service.
// All implementations must embed UnimplementedUploaderHandlerServiceServer
// for forward compatibility
type UploaderHandlerServiceServer interface {
	TenantHasAccess(context.Context, *dlzamanagerproto.UploaderAccessObject) (*dlzamanagerproto.Status, error)
	SaveObjectAndFiles(context.Context, *dlzamanagerproto.ObjectAndFiles) (*dlzamanagerproto.Id, error)
	AlterStatus(context.Context, *dlzamanagerproto.StatusObject) (*dlzamanagerproto.Status, error)
	mustEmbedUnimplementedUploaderHandlerServiceServer()
}

// UnimplementedUploaderHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploaderHandlerServiceServer struct {
}

func (UnimplementedUploaderHandlerServiceServer) TenantHasAccess(context.Context, *dlzamanagerproto.UploaderAccessObject) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantHasAccess not implemented")
}
func (UnimplementedUploaderHandlerServiceServer) SaveObjectAndFiles(context.Context, *dlzamanagerproto.ObjectAndFiles) (*dlzamanagerproto.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveObjectAndFiles not implemented")
}
func (UnimplementedUploaderHandlerServiceServer) AlterStatus(context.Context, *dlzamanagerproto.StatusObject) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterStatus not implemented")
}
func (UnimplementedUploaderHandlerServiceServer) mustEmbedUnimplementedUploaderHandlerServiceServer() {
}

// UnsafeUploaderHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploaderHandlerServiceServer will
// result in compilation errors.
type UnsafeUploaderHandlerServiceServer interface {
	mustEmbedUnimplementedUploaderHandlerServiceServer()
}

func RegisterUploaderHandlerServiceServer(s grpc.ServiceRegistrar, srv UploaderHandlerServiceServer) {
	s.RegisterService(&UploaderHandlerService_ServiceDesc, srv)
}

func _UploaderHandlerService_TenantHasAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.UploaderAccessObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderHandlerServiceServer).TenantHasAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploaderHandlerService_TenantHasAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderHandlerServiceServer).TenantHasAccess(ctx, req.(*dlzamanagerproto.UploaderAccessObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploaderHandlerService_SaveObjectAndFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.ObjectAndFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderHandlerServiceServer).SaveObjectAndFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploaderHandlerService_SaveObjectAndFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderHandlerServiceServer).SaveObjectAndFiles(ctx, req.(*dlzamanagerproto.ObjectAndFiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploaderHandlerService_AlterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StatusObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderHandlerServiceServer).AlterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploaderHandlerService_AlterStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderHandlerServiceServer).AlterStatus(ctx, req.(*dlzamanagerproto.StatusObject))
	}
	return interceptor(ctx, in, info, handler)
}

// UploaderHandlerService_ServiceDesc is the grpc.ServiceDesc for UploaderHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploaderHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storagehandlerproto.UploaderHandlerService",
	HandlerType: (*UploaderHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TenantHasAccess",
			Handler:    _UploaderHandlerService_TenantHasAccess_Handler,
		},
		{
			MethodName: "SaveObjectAndFiles",
			Handler:    _UploaderHandlerService_SaveObjectAndFiles_Handler,
		},
		{
			MethodName: "AlterStatus",
			Handler:    _UploaderHandlerService_AlterStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_handler_proto.proto",
}

const (
	ClerkStorageHandlerService_CreateStoragePartition_FullMethodName = "/storagehandlerproto.ClerkStorageHandlerService/CreateStoragePartition"
)

// ClerkStorageHandlerServiceClient is the client API for ClerkStorageHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClerkStorageHandlerServiceClient interface {
	CreateStoragePartition(ctx context.Context, in *dlzamanagerproto.StoragePartition, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
}

type clerkStorageHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClerkStorageHandlerServiceClient(cc grpc.ClientConnInterface) ClerkStorageHandlerServiceClient {
	return &clerkStorageHandlerServiceClient{cc}
}

func (c *clerkStorageHandlerServiceClient) CreateStoragePartition(ctx context.Context, in *dlzamanagerproto.StoragePartition, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkStorageHandlerService_CreateStoragePartition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClerkStorageHandlerServiceServer is the server API for ClerkStorageHandlerService service.
// All implementations must embed UnimplementedClerkStorageHandlerServiceServer
// for forward compatibility
type ClerkStorageHandlerServiceServer interface {
	CreateStoragePartition(context.Context, *dlzamanagerproto.StoragePartition) (*dlzamanagerproto.Status, error)
	mustEmbedUnimplementedClerkStorageHandlerServiceServer()
}

// UnimplementedClerkStorageHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClerkStorageHandlerServiceServer struct {
}

func (UnimplementedClerkStorageHandlerServiceServer) CreateStoragePartition(context.Context, *dlzamanagerproto.StoragePartition) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoragePartition not implemented")
}
func (UnimplementedClerkStorageHandlerServiceServer) mustEmbedUnimplementedClerkStorageHandlerServiceServer() {
}

// UnsafeClerkStorageHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClerkStorageHandlerServiceServer will
// result in compilation errors.
type UnsafeClerkStorageHandlerServiceServer interface {
	mustEmbedUnimplementedClerkStorageHandlerServiceServer()
}

func RegisterClerkStorageHandlerServiceServer(s grpc.ServiceRegistrar, srv ClerkStorageHandlerServiceServer) {
	s.RegisterService(&ClerkStorageHandlerService_ServiceDesc, srv)
}

func _ClerkStorageHandlerService_CreateStoragePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StoragePartition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkStorageHandlerServiceServer).CreateStoragePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkStorageHandlerService_CreateStoragePartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkStorageHandlerServiceServer).CreateStoragePartition(ctx, req.(*dlzamanagerproto.StoragePartition))
	}
	return interceptor(ctx, in, info, handler)
}

// ClerkStorageHandlerService_ServiceDesc is the grpc.ServiceDesc for ClerkStorageHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClerkStorageHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storagehandlerproto.ClerkStorageHandlerService",
	HandlerType: (*ClerkStorageHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStoragePartition",
			Handler:    _ClerkStorageHandlerService_CreateStoragePartition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_handler_proto.proto",
}

const (
	ClerkHandlerService_FindTenantById_FullMethodName                                     = "/storagehandlerproto.ClerkHandlerService/FindTenantById"
	ClerkHandlerService_DeleteTenant_FullMethodName                                       = "/storagehandlerproto.ClerkHandlerService/DeleteTenant"
	ClerkHandlerService_SaveTenant_FullMethodName                                         = "/storagehandlerproto.ClerkHandlerService/SaveTenant"
	ClerkHandlerService_UpdateTenant_FullMethodName                                       = "/storagehandlerproto.ClerkHandlerService/UpdateTenant"
	ClerkHandlerService_FindAllTenants_FullMethodName                                     = "/storagehandlerproto.ClerkHandlerService/FindAllTenants"
	ClerkHandlerService_GetStorageLocationsByTenantId_FullMethodName                      = "/storagehandlerproto.ClerkHandlerService/GetStorageLocationsByTenantId"
	ClerkHandlerService_SaveStorageLocation_FullMethodName                                = "/storagehandlerproto.ClerkHandlerService/SaveStorageLocation"
	ClerkHandlerService_DeleteStorageLocationById_FullMethodName                          = "/storagehandlerproto.ClerkHandlerService/DeleteStorageLocationById"
	ClerkHandlerService_GetCollectionsByTenantId_FullMethodName                           = "/storagehandlerproto.ClerkHandlerService/GetCollectionsByTenantId"
	ClerkHandlerService_GetCollectionById_FullMethodName                                  = "/storagehandlerproto.ClerkHandlerService/GetCollectionById"
	ClerkHandlerService_DeleteCollectionById_FullMethodName                               = "/storagehandlerproto.ClerkHandlerService/DeleteCollectionById"
	ClerkHandlerService_CreateCollection_FullMethodName                                   = "/storagehandlerproto.ClerkHandlerService/CreateCollection"
	ClerkHandlerService_UpdateCollection_FullMethodName                                   = "/storagehandlerproto.ClerkHandlerService/UpdateCollection"
	ClerkHandlerService_GetObjectById_FullMethodName                                      = "/storagehandlerproto.ClerkHandlerService/GetObjectById"
	ClerkHandlerService_GetObjectInstanceById_FullMethodName                              = "/storagehandlerproto.ClerkHandlerService/GetObjectInstanceById"
	ClerkHandlerService_GetFileById_FullMethodName                                        = "/storagehandlerproto.ClerkHandlerService/GetFileById"
	ClerkHandlerService_GetObjectInstanceCheckById_FullMethodName                         = "/storagehandlerproto.ClerkHandlerService/GetObjectInstanceCheckById"
	ClerkHandlerService_GetStorageLocationById_FullMethodName                             = "/storagehandlerproto.ClerkHandlerService/GetStorageLocationById"
	ClerkHandlerService_GetStoragePartitionById_FullMethodName                            = "/storagehandlerproto.ClerkHandlerService/GetStoragePartitionById"
	ClerkHandlerService_FindAllTenantsPaginated_FullMethodName                            = "/storagehandlerproto.ClerkHandlerService/FindAllTenantsPaginated"
	ClerkHandlerService_GetCollectionsByTenantIdPaginated_FullMethodName                  = "/storagehandlerproto.ClerkHandlerService/GetCollectionsByTenantIdPaginated"
	ClerkHandlerService_GetObjectsByCollectionIdPaginated_FullMethodName                  = "/storagehandlerproto.ClerkHandlerService/GetObjectsByCollectionIdPaginated"
	ClerkHandlerService_GetFilesByCollectionIdPaginated_FullMethodName                    = "/storagehandlerproto.ClerkHandlerService/GetFilesByCollectionIdPaginated"
	ClerkHandlerService_GetMimeTypesForCollectionId_FullMethodName                        = "/storagehandlerproto.ClerkHandlerService/GetMimeTypesForCollectionId"
	ClerkHandlerService_GetPronomsForCollectionId_FullMethodName                          = "/storagehandlerproto.ClerkHandlerService/GetPronomsForCollectionId"
	ClerkHandlerService_GetObjectInstancesByObjectIdPaginated_FullMethodName              = "/storagehandlerproto.ClerkHandlerService/GetObjectInstancesByObjectIdPaginated"
	ClerkHandlerService_GetFilesByObjectIdPaginated_FullMethodName                        = "/storagehandlerproto.ClerkHandlerService/GetFilesByObjectIdPaginated"
	ClerkHandlerService_GetObjectInstanceChecksByObjectInstanceIdPaginated_FullMethodName = "/storagehandlerproto.ClerkHandlerService/GetObjectInstanceChecksByObjectInstanceIdPaginated"
	ClerkHandlerService_GetStorageLocationsByTenantIdPaginated_FullMethodName             = "/storagehandlerproto.ClerkHandlerService/GetStorageLocationsByTenantIdPaginated"
	ClerkHandlerService_GetStoragePartitionsByLocationIdPaginated_FullMethodName          = "/storagehandlerproto.ClerkHandlerService/GetStoragePartitionsByLocationIdPaginated"
	ClerkHandlerService_GetObjectInstancesByStoragePartitionIdPaginated_FullMethodName    = "/storagehandlerproto.ClerkHandlerService/GetObjectInstancesByStoragePartitionIdPaginated"
	ClerkHandlerService_CheckStatus_FullMethodName                                        = "/storagehandlerproto.ClerkHandlerService/CheckStatus"
	ClerkHandlerService_CreateStatus_FullMethodName                                       = "/storagehandlerproto.ClerkHandlerService/CreateStatus"
	ClerkHandlerService_AlterStatus_FullMethodName                                        = "/storagehandlerproto.ClerkHandlerService/AlterStatus"
)

// ClerkHandlerServiceClient is the client API for ClerkHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClerkHandlerServiceClient interface {
	FindTenantById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Tenant, error)
	DeleteTenant(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	SaveTenant(ctx context.Context, in *dlzamanagerproto.Tenant, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	UpdateTenant(ctx context.Context, in *dlzamanagerproto.Tenant, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	FindAllTenants(ctx context.Context, in *dlzamanagerproto.NoParam, opts ...grpc.CallOption) (*dlzamanagerproto.Tenants, error)
	GetStorageLocationsByTenantId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocations, error)
	SaveStorageLocation(ctx context.Context, in *dlzamanagerproto.StorageLocation, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	DeleteStorageLocationById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	GetCollectionsByTenantId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Collections, error)
	GetCollectionById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Collection, error)
	DeleteCollectionById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	CreateCollection(ctx context.Context, in *dlzamanagerproto.Collection, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	UpdateCollection(ctx context.Context, in *dlzamanagerproto.Collection, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	GetObjectById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Object, error)
	GetObjectInstanceById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstance, error)
	GetFileById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.File, error)
	GetObjectInstanceCheckById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstanceCheck, error)
	GetStorageLocationById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocation, error)
	GetStoragePartitionById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StoragePartition, error)
	FindAllTenantsPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Tenants, error)
	GetCollectionsByTenantIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Collections, error)
	GetObjectsByCollectionIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Objects, error)
	GetFilesByCollectionIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Files, error)
	GetMimeTypesForCollectionId(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.MimeTypes, error)
	GetPronomsForCollectionId(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Pronoms, error)
	GetObjectInstancesByObjectIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error)
	GetFilesByObjectIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Files, error)
	GetObjectInstanceChecksByObjectInstanceIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstanceChecks, error)
	GetStorageLocationsByTenantIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocations, error)
	GetStoragePartitionsByLocationIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.StoragePartitions, error)
	GetObjectInstancesByStoragePartitionIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error)
	CheckStatus(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StatusObject, error)
	CreateStatus(ctx context.Context, in *dlzamanagerproto.StatusObject, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error)
	AlterStatus(ctx context.Context, in *dlzamanagerproto.StatusObject, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
}

type clerkHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClerkHandlerServiceClient(cc grpc.ClientConnInterface) ClerkHandlerServiceClient {
	return &clerkHandlerServiceClient{cc}
}

func (c *clerkHandlerServiceClient) FindTenantById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Tenant, error) {
	out := new(dlzamanagerproto.Tenant)
	err := c.cc.Invoke(ctx, ClerkHandlerService_FindTenantById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) DeleteTenant(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_DeleteTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) SaveTenant(ctx context.Context, in *dlzamanagerproto.Tenant, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_SaveTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) UpdateTenant(ctx context.Context, in *dlzamanagerproto.Tenant, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_UpdateTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) FindAllTenants(ctx context.Context, in *dlzamanagerproto.NoParam, opts ...grpc.CallOption) (*dlzamanagerproto.Tenants, error) {
	out := new(dlzamanagerproto.Tenants)
	err := c.cc.Invoke(ctx, ClerkHandlerService_FindAllTenants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStorageLocationsByTenantId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocations, error) {
	out := new(dlzamanagerproto.StorageLocations)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetStorageLocationsByTenantId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) SaveStorageLocation(ctx context.Context, in *dlzamanagerproto.StorageLocation, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_SaveStorageLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) DeleteStorageLocationById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_DeleteStorageLocationById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetCollectionsByTenantId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Collections, error) {
	out := new(dlzamanagerproto.Collections)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetCollectionsByTenantId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetCollectionById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Collection, error) {
	out := new(dlzamanagerproto.Collection)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetCollectionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) DeleteCollectionById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_DeleteCollectionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) CreateCollection(ctx context.Context, in *dlzamanagerproto.Collection, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_CreateCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) UpdateCollection(ctx context.Context, in *dlzamanagerproto.Collection, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_UpdateCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Object, error) {
	out := new(dlzamanagerproto.Object)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstanceById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstance, error) {
	out := new(dlzamanagerproto.ObjectInstance)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectInstanceById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetFileById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.File, error) {
	out := new(dlzamanagerproto.File)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetFileById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstanceCheckById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstanceCheck, error) {
	out := new(dlzamanagerproto.ObjectInstanceCheck)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectInstanceCheckById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStorageLocationById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocation, error) {
	out := new(dlzamanagerproto.StorageLocation)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetStorageLocationById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStoragePartitionById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StoragePartition, error) {
	out := new(dlzamanagerproto.StoragePartition)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetStoragePartitionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) FindAllTenantsPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Tenants, error) {
	out := new(dlzamanagerproto.Tenants)
	err := c.cc.Invoke(ctx, ClerkHandlerService_FindAllTenantsPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetCollectionsByTenantIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Collections, error) {
	out := new(dlzamanagerproto.Collections)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetCollectionsByTenantIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectsByCollectionIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Objects, error) {
	out := new(dlzamanagerproto.Objects)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectsByCollectionIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetFilesByCollectionIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Files, error) {
	out := new(dlzamanagerproto.Files)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetFilesByCollectionIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetMimeTypesForCollectionId(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.MimeTypes, error) {
	out := new(dlzamanagerproto.MimeTypes)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetMimeTypesForCollectionId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetPronomsForCollectionId(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Pronoms, error) {
	out := new(dlzamanagerproto.Pronoms)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetPronomsForCollectionId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstancesByObjectIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error) {
	out := new(dlzamanagerproto.ObjectInstances)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectInstancesByObjectIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetFilesByObjectIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Files, error) {
	out := new(dlzamanagerproto.Files)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetFilesByObjectIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstanceChecksByObjectInstanceIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstanceChecks, error) {
	out := new(dlzamanagerproto.ObjectInstanceChecks)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectInstanceChecksByObjectInstanceIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStorageLocationsByTenantIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocations, error) {
	out := new(dlzamanagerproto.StorageLocations)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetStorageLocationsByTenantIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStoragePartitionsByLocationIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.StoragePartitions, error) {
	out := new(dlzamanagerproto.StoragePartitions)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetStoragePartitionsByLocationIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstancesByStoragePartitionIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error) {
	out := new(dlzamanagerproto.ObjectInstances)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectInstancesByStoragePartitionIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) CheckStatus(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StatusObject, error) {
	out := new(dlzamanagerproto.StatusObject)
	err := c.cc.Invoke(ctx, ClerkHandlerService_CheckStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) CreateStatus(ctx context.Context, in *dlzamanagerproto.StatusObject, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error) {
	out := new(dlzamanagerproto.Id)
	err := c.cc.Invoke(ctx, ClerkHandlerService_CreateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) AlterStatus(ctx context.Context, in *dlzamanagerproto.StatusObject, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_AlterStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClerkHandlerServiceServer is the server API for ClerkHandlerService service.
// All implementations must embed UnimplementedClerkHandlerServiceServer
// for forward compatibility
type ClerkHandlerServiceServer interface {
	FindTenantById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Tenant, error)
	DeleteTenant(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error)
	SaveTenant(context.Context, *dlzamanagerproto.Tenant) (*dlzamanagerproto.Status, error)
	UpdateTenant(context.Context, *dlzamanagerproto.Tenant) (*dlzamanagerproto.Status, error)
	FindAllTenants(context.Context, *dlzamanagerproto.NoParam) (*dlzamanagerproto.Tenants, error)
	GetStorageLocationsByTenantId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StorageLocations, error)
	SaveStorageLocation(context.Context, *dlzamanagerproto.StorageLocation) (*dlzamanagerproto.Status, error)
	DeleteStorageLocationById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error)
	GetCollectionsByTenantId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Collections, error)
	GetCollectionById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Collection, error)
	DeleteCollectionById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error)
	CreateCollection(context.Context, *dlzamanagerproto.Collection) (*dlzamanagerproto.Status, error)
	UpdateCollection(context.Context, *dlzamanagerproto.Collection) (*dlzamanagerproto.Status, error)
	GetObjectById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Object, error)
	GetObjectInstanceById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.ObjectInstance, error)
	GetFileById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.File, error)
	GetObjectInstanceCheckById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.ObjectInstanceCheck, error)
	GetStorageLocationById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StorageLocation, error)
	GetStoragePartitionById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StoragePartition, error)
	FindAllTenantsPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Tenants, error)
	GetCollectionsByTenantIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Collections, error)
	GetObjectsByCollectionIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Objects, error)
	GetFilesByCollectionIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Files, error)
	GetMimeTypesForCollectionId(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.MimeTypes, error)
	GetPronomsForCollectionId(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Pronoms, error)
	GetObjectInstancesByObjectIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.ObjectInstances, error)
	GetFilesByObjectIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Files, error)
	GetObjectInstanceChecksByObjectInstanceIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.ObjectInstanceChecks, error)
	GetStorageLocationsByTenantIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.StorageLocations, error)
	GetStoragePartitionsByLocationIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.StoragePartitions, error)
	GetObjectInstancesByStoragePartitionIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.ObjectInstances, error)
	CheckStatus(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StatusObject, error)
	CreateStatus(context.Context, *dlzamanagerproto.StatusObject) (*dlzamanagerproto.Id, error)
	AlterStatus(context.Context, *dlzamanagerproto.StatusObject) (*dlzamanagerproto.Status, error)
	mustEmbedUnimplementedClerkHandlerServiceServer()
}

// UnimplementedClerkHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClerkHandlerServiceServer struct {
}

func (UnimplementedClerkHandlerServiceServer) FindTenantById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTenantById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) DeleteTenant(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedClerkHandlerServiceServer) SaveTenant(context.Context, *dlzamanagerproto.Tenant) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTenant not implemented")
}
func (UnimplementedClerkHandlerServiceServer) UpdateTenant(context.Context, *dlzamanagerproto.Tenant) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedClerkHandlerServiceServer) FindAllTenants(context.Context, *dlzamanagerproto.NoParam) (*dlzamanagerproto.Tenants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTenants not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStorageLocationsByTenantId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StorageLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationsByTenantId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) SaveStorageLocation(context.Context, *dlzamanagerproto.StorageLocation) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStorageLocation not implemented")
}
func (UnimplementedClerkHandlerServiceServer) DeleteStorageLocationById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorageLocationById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetCollectionsByTenantId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Collections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionsByTenantId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetCollectionById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) DeleteCollectionById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollectionById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) CreateCollection(context.Context, *dlzamanagerproto.Collection) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedClerkHandlerServiceServer) UpdateCollection(context.Context, *dlzamanagerproto.Collection) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollection not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstanceById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.ObjectInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstanceById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetFileById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstanceCheckById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.ObjectInstanceCheck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstanceCheckById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStorageLocationById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StorageLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStoragePartitionById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StoragePartition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoragePartitionById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) FindAllTenantsPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Tenants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTenantsPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetCollectionsByTenantIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Collections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionsByTenantIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectsByCollectionIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Objects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsByCollectionIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetFilesByCollectionIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Files, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesByCollectionIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetMimeTypesForCollectionId(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.MimeTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMimeTypesForCollectionId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetPronomsForCollectionId(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Pronoms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPronomsForCollectionId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstancesByObjectIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.ObjectInstances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstancesByObjectIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetFilesByObjectIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Files, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesByObjectIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstanceChecksByObjectInstanceIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.ObjectInstanceChecks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstanceChecksByObjectInstanceIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStorageLocationsByTenantIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.StorageLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationsByTenantIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStoragePartitionsByLocationIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.StoragePartitions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoragePartitionsByLocationIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstancesByStoragePartitionIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.ObjectInstances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstancesByStoragePartitionIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) CheckStatus(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StatusObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatus not implemented")
}
func (UnimplementedClerkHandlerServiceServer) CreateStatus(context.Context, *dlzamanagerproto.StatusObject) (*dlzamanagerproto.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatus not implemented")
}
func (UnimplementedClerkHandlerServiceServer) AlterStatus(context.Context, *dlzamanagerproto.StatusObject) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterStatus not implemented")
}
func (UnimplementedClerkHandlerServiceServer) mustEmbedUnimplementedClerkHandlerServiceServer() {}

// UnsafeClerkHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClerkHandlerServiceServer will
// result in compilation errors.
type UnsafeClerkHandlerServiceServer interface {
	mustEmbedUnimplementedClerkHandlerServiceServer()
}

func RegisterClerkHandlerServiceServer(s grpc.ServiceRegistrar, srv ClerkHandlerServiceServer) {
	s.RegisterService(&ClerkHandlerService_ServiceDesc, srv)
}

func _ClerkHandlerService_FindTenantById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).FindTenantById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_FindTenantById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).FindTenantById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).DeleteTenant(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_SaveTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).SaveTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_SaveTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).SaveTenant(ctx, req.(*dlzamanagerproto.Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).UpdateTenant(ctx, req.(*dlzamanagerproto.Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_FindAllTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).FindAllTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_FindAllTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).FindAllTenants(ctx, req.(*dlzamanagerproto.NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStorageLocationsByTenantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsByTenantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetStorageLocationsByTenantId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsByTenantId(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_SaveStorageLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StorageLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).SaveStorageLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_SaveStorageLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).SaveStorageLocation(ctx, req.(*dlzamanagerproto.StorageLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_DeleteStorageLocationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).DeleteStorageLocationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_DeleteStorageLocationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).DeleteStorageLocationById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetCollectionsByTenantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetCollectionsByTenantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetCollectionsByTenantId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetCollectionsByTenantId(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetCollectionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetCollectionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetCollectionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetCollectionById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_DeleteCollectionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).DeleteCollectionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_DeleteCollectionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).DeleteCollectionById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).CreateCollection(ctx, req.(*dlzamanagerproto.Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_UpdateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).UpdateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_UpdateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).UpdateCollection(ctx, req.(*dlzamanagerproto.Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstanceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectInstanceById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetFileById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetFileById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetFileById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetFileById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstanceCheckById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceCheckById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectInstanceCheckById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceCheckById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStorageLocationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetStorageLocationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStoragePartitionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStoragePartitionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetStoragePartitionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStoragePartitionById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_FindAllTenantsPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).FindAllTenantsPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_FindAllTenantsPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).FindAllTenantsPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetCollectionsByTenantIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetCollectionsByTenantIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetCollectionsByTenantIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetCollectionsByTenantIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectsByCollectionIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectsByCollectionIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectsByCollectionIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectsByCollectionIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetFilesByCollectionIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetFilesByCollectionIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetFilesByCollectionIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetFilesByCollectionIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetMimeTypesForCollectionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetMimeTypesForCollectionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetMimeTypesForCollectionId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetMimeTypesForCollectionId(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetPronomsForCollectionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetPronomsForCollectionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetPronomsForCollectionId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetPronomsForCollectionId(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstancesByObjectIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstancesByObjectIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectInstancesByObjectIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstancesByObjectIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetFilesByObjectIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetFilesByObjectIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetFilesByObjectIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetFilesByObjectIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstanceChecksByObjectInstanceIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceChecksByObjectInstanceIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectInstanceChecksByObjectInstanceIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceChecksByObjectInstanceIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStorageLocationsByTenantIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsByTenantIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetStorageLocationsByTenantIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsByTenantIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStoragePartitionsByLocationIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStoragePartitionsByLocationIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetStoragePartitionsByLocationIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStoragePartitionsByLocationIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstancesByStoragePartitionIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstancesByStoragePartitionIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectInstancesByStoragePartitionIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstancesByStoragePartitionIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_CheckStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).CheckStatus(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_CreateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StatusObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).CreateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_CreateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).CreateStatus(ctx, req.(*dlzamanagerproto.StatusObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_AlterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StatusObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).AlterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_AlterStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).AlterStatus(ctx, req.(*dlzamanagerproto.StatusObject))
	}
	return interceptor(ctx, in, info, handler)
}

// ClerkHandlerService_ServiceDesc is the grpc.ServiceDesc for ClerkHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClerkHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storagehandlerproto.ClerkHandlerService",
	HandlerType: (*ClerkHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindTenantById",
			Handler:    _ClerkHandlerService_FindTenantById_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _ClerkHandlerService_DeleteTenant_Handler,
		},
		{
			MethodName: "SaveTenant",
			Handler:    _ClerkHandlerService_SaveTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _ClerkHandlerService_UpdateTenant_Handler,
		},
		{
			MethodName: "FindAllTenants",
			Handler:    _ClerkHandlerService_FindAllTenants_Handler,
		},
		{
			MethodName: "GetStorageLocationsByTenantId",
			Handler:    _ClerkHandlerService_GetStorageLocationsByTenantId_Handler,
		},
		{
			MethodName: "SaveStorageLocation",
			Handler:    _ClerkHandlerService_SaveStorageLocation_Handler,
		},
		{
			MethodName: "DeleteStorageLocationById",
			Handler:    _ClerkHandlerService_DeleteStorageLocationById_Handler,
		},
		{
			MethodName: "GetCollectionsByTenantId",
			Handler:    _ClerkHandlerService_GetCollectionsByTenantId_Handler,
		},
		{
			MethodName: "GetCollectionById",
			Handler:    _ClerkHandlerService_GetCollectionById_Handler,
		},
		{
			MethodName: "DeleteCollectionById",
			Handler:    _ClerkHandlerService_DeleteCollectionById_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _ClerkHandlerService_CreateCollection_Handler,
		},
		{
			MethodName: "UpdateCollection",
			Handler:    _ClerkHandlerService_UpdateCollection_Handler,
		},
		{
			MethodName: "GetObjectById",
			Handler:    _ClerkHandlerService_GetObjectById_Handler,
		},
		{
			MethodName: "GetObjectInstanceById",
			Handler:    _ClerkHandlerService_GetObjectInstanceById_Handler,
		},
		{
			MethodName: "GetFileById",
			Handler:    _ClerkHandlerService_GetFileById_Handler,
		},
		{
			MethodName: "GetObjectInstanceCheckById",
			Handler:    _ClerkHandlerService_GetObjectInstanceCheckById_Handler,
		},
		{
			MethodName: "GetStorageLocationById",
			Handler:    _ClerkHandlerService_GetStorageLocationById_Handler,
		},
		{
			MethodName: "GetStoragePartitionById",
			Handler:    _ClerkHandlerService_GetStoragePartitionById_Handler,
		},
		{
			MethodName: "FindAllTenantsPaginated",
			Handler:    _ClerkHandlerService_FindAllTenantsPaginated_Handler,
		},
		{
			MethodName: "GetCollectionsByTenantIdPaginated",
			Handler:    _ClerkHandlerService_GetCollectionsByTenantIdPaginated_Handler,
		},
		{
			MethodName: "GetObjectsByCollectionIdPaginated",
			Handler:    _ClerkHandlerService_GetObjectsByCollectionIdPaginated_Handler,
		},
		{
			MethodName: "GetFilesByCollectionIdPaginated",
			Handler:    _ClerkHandlerService_GetFilesByCollectionIdPaginated_Handler,
		},
		{
			MethodName: "GetMimeTypesForCollectionId",
			Handler:    _ClerkHandlerService_GetMimeTypesForCollectionId_Handler,
		},
		{
			MethodName: "GetPronomsForCollectionId",
			Handler:    _ClerkHandlerService_GetPronomsForCollectionId_Handler,
		},
		{
			MethodName: "GetObjectInstancesByObjectIdPaginated",
			Handler:    _ClerkHandlerService_GetObjectInstancesByObjectIdPaginated_Handler,
		},
		{
			MethodName: "GetFilesByObjectIdPaginated",
			Handler:    _ClerkHandlerService_GetFilesByObjectIdPaginated_Handler,
		},
		{
			MethodName: "GetObjectInstanceChecksByObjectInstanceIdPaginated",
			Handler:    _ClerkHandlerService_GetObjectInstanceChecksByObjectInstanceIdPaginated_Handler,
		},
		{
			MethodName: "GetStorageLocationsByTenantIdPaginated",
			Handler:    _ClerkHandlerService_GetStorageLocationsByTenantIdPaginated_Handler,
		},
		{
			MethodName: "GetStoragePartitionsByLocationIdPaginated",
			Handler:    _ClerkHandlerService_GetStoragePartitionsByLocationIdPaginated_Handler,
		},
		{
			MethodName: "GetObjectInstancesByStoragePartitionIdPaginated",
			Handler:    _ClerkHandlerService_GetObjectInstancesByStoragePartitionIdPaginated_Handler,
		},
		{
			MethodName: "CheckStatus",
			Handler:    _ClerkHandlerService_CheckStatus_Handler,
		},
		{
			MethodName: "CreateStatus",
			Handler:    _ClerkHandlerService_CreateStatus_Handler,
		},
		{
			MethodName: "AlterStatus",
			Handler:    _ClerkHandlerService_AlterStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_handler_proto.proto",
}

const (
	DispatcherStorageHandlerService_Ping_FullMethodName                        = "/storagehandlerproto.DispatcherStorageHandlerService/Ping"
	DispatcherStorageHandlerService_ChangeQualityForCollections_FullMethodName = "/storagehandlerproto.DispatcherStorageHandlerService/ChangeQualityForCollections"
)

// DispatcherStorageHandlerServiceClient is the client API for DispatcherStorageHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatcherStorageHandlerServiceClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
	ChangeQualityForCollections(ctx context.Context, in *dlzamanagerproto.CollectionAliases, opts ...grpc.CallOption) (*dlzamanagerproto.NoParam, error)
}

type dispatcherStorageHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherStorageHandlerServiceClient(cc grpc.ClientConnInterface) DispatcherStorageHandlerServiceClient {
	return &dispatcherStorageHandlerServiceClient{cc}
}

func (c *dispatcherStorageHandlerServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, DispatcherStorageHandlerService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherStorageHandlerServiceClient) ChangeQualityForCollections(ctx context.Context, in *dlzamanagerproto.CollectionAliases, opts ...grpc.CallOption) (*dlzamanagerproto.NoParam, error) {
	out := new(dlzamanagerproto.NoParam)
	err := c.cc.Invoke(ctx, DispatcherStorageHandlerService_ChangeQualityForCollections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherStorageHandlerServiceServer is the server API for DispatcherStorageHandlerService service.
// All implementations must embed UnimplementedDispatcherStorageHandlerServiceServer
// for forward compatibility
type DispatcherStorageHandlerServiceServer interface {
	Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error)
	ChangeQualityForCollections(context.Context, *dlzamanagerproto.CollectionAliases) (*dlzamanagerproto.NoParam, error)
	mustEmbedUnimplementedDispatcherStorageHandlerServiceServer()
}

// UnimplementedDispatcherStorageHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDispatcherStorageHandlerServiceServer struct {
}

func (UnimplementedDispatcherStorageHandlerServiceServer) Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDispatcherStorageHandlerServiceServer) ChangeQualityForCollections(context.Context, *dlzamanagerproto.CollectionAliases) (*dlzamanagerproto.NoParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeQualityForCollections not implemented")
}
func (UnimplementedDispatcherStorageHandlerServiceServer) mustEmbedUnimplementedDispatcherStorageHandlerServiceServer() {
}

// UnsafeDispatcherStorageHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatcherStorageHandlerServiceServer will
// result in compilation errors.
type UnsafeDispatcherStorageHandlerServiceServer interface {
	mustEmbedUnimplementedDispatcherStorageHandlerServiceServer()
}

func RegisterDispatcherStorageHandlerServiceServer(s grpc.ServiceRegistrar, srv DispatcherStorageHandlerServiceServer) {
	s.RegisterService(&DispatcherStorageHandlerService_ServiceDesc, srv)
}

func _DispatcherStorageHandlerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherStorageHandlerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DispatcherStorageHandlerService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherStorageHandlerServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DispatcherStorageHandlerService_ChangeQualityForCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.CollectionAliases)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherStorageHandlerServiceServer).ChangeQualityForCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DispatcherStorageHandlerService_ChangeQualityForCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherStorageHandlerServiceServer).ChangeQualityForCollections(ctx, req.(*dlzamanagerproto.CollectionAliases))
	}
	return interceptor(ctx, in, info, handler)
}

// DispatcherStorageHandlerService_ServiceDesc is the grpc.ServiceDesc for DispatcherStorageHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DispatcherStorageHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storagehandlerproto.DispatcherStorageHandlerService",
	HandlerType: (*DispatcherStorageHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DispatcherStorageHandlerService_Ping_Handler,
		},
		{
			MethodName: "ChangeQualityForCollections",
			Handler:    _DispatcherStorageHandlerService_ChangeQualityForCollections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_handler_proto.proto",
}
